using Microsoft.AspNetCore.Mvc;
using System;
using project10.Models;
using project10.Repositories;
using Newtonsoft.Json.Linq;
using Microsoft.Extensions.Configuration;
using Swashbuckle.AspNetCore.Annotations;
using Npgsql;
using Microsoft.AspNetCore.Http;
using NpgsqlTypes;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;


namespace project10.Controllers
{
  /// <summary>
  /// My controller description33333
  /// </summary>
  [Route("api/favourites")]
  [ApiController]
  [SwaggerTag("This is an example controller generated by ASP.NET Core 2.x")]
  public class FavouritePlacecontroller : ApplicationController
  {
    private FavouritePlaceRepository _fpRepository;
    public FavouritePlacecontroller(IConfiguration configuration) : base(configuration)
    {
      _fpRepository = new Repositories.FavouritePlaceRepository(this.connect);
    }


    /// <remarks>
    /// Данный метод реализует создание списка избранных мест
    /// </remarks>
    /// <returns>New Created Todo Item</returns>
    /// <response code="201">Returns the newly created item</response>
    /// <response code="500">If the item is incorrect</response>
    // [ProducesResponseType(typeof(FavouritePlace), 201)]


    [HttpPost]
    [SwaggerOperation(
        Summary = "Избранные места",
        Description = "Данный метод реализует создание списка избранных мест",
        OperationId = "CreateProduct",
        Tags = new[] { "favourites - Избранные места пользователя" }
    )]
    public IActionResult Create([FromBody] FavouritePlace fp)
    {
      try
      {
        _fpRepository.Create(fp);

        return StatusCode(201, fp);
      }
      catch (Exception err)
      {
        return StatusCode(500, err);
      }
    }

    [HttpGet]
    public IActionResult List()
    {
      try
      {
        JArray tr = _fpRepository.List();

        return StatusCode(200, tr);
      }
      catch (Exception err)
      {
        return StatusCode(500, err);
      }
    }


    [HttpDelete("{id}")]
    public IActionResult Delete([FromRoute] int id)
    {

      try
      {

        _fpRepository.Delete(id);

        return StatusCode(204, null);
      }
      catch (Exception err)
      {
        // swith по эксепшену
        return StatusCode(500, err);
      }
    }


    [HttpPut("{id}")]
    public IActionResult Update([FromBody] FavouritePlace fp)
    {
      try
      {
        _fpRepository.Update(fp);
        return StatusCode(204, null);
      }
      catch (Exception err)
      {
        return StatusCode(500, err);
      }
    }


    [HttpGet("{id}")]
    public IActionResult Show([FromRoute] int id)
    {
      try
      {
        JToken tr = _fpRepository.Show(id);
        return StatusCode(200, tr);
      }
      catch (Exception err)
      {
        return StatusCode(500, err);
      }
    }


  }
}
